/*
 */

version = '2.1.0'

//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.breadmoirai:github-release:2.2.12"
    }
}

apply plugin: "com.github.breadmoirai.github-release"

repositories {
    jcenter()
    maven { url 'https://dl.bintray.com/content/simonpoole/osm' }
}

ext {
    preset_file = 'master_preset.xml'
    josm_preset_file = 'josm_preset.xml'
    mapped_josm_preset_file = 'mapped_josm_preset.xml'
    mapped_vespucci_preset_file = 'mapped_vespucci_preset.xml'
    vespucci_preset_file = 'vespucci_preset.xml'
    vespucci_preset_build_file = 'vespucci_preset_build.xml'
    vespucci_preset_version = '1.12'
    generated = 'build/gen/'
    generatedDir = file(generated)
    temp = 'build/temp/'
    tempDir = file(temp)
    github_token = System.getenv('GITHUB_TOKEN')
}

dependencies {
    runtime 'ch.poole:preset-utils:0.23.0'
}

task copyCss(type: Copy) {
    from zipTree(project.configurations.runtime.filter{it.name.startsWith('preset-utils')}.singleFile)
    include "preset.css"
    into new File(projectDir.getPath() + '/website')
}

task copyResources(type: Copy) {
    from zipTree(project.configurations.runtime.filter{it.name.startsWith('preset-utils')}.singleFile)
    include "josm-preset-1.0.xlmns"
    include "vespucci-preset-${vespucci_preset_version}.xlmns"
    include "toJOSM.xslt"
    include "href2wiki.xslt"
    include "wiki2href.xslt"
    into new File(buildDir.getPath() + '/xml')
}

task updateWebsite(dependsOn: ["copyCss",'vespucciIcons'], type: JavaExec) {
    main = "ch.poole.osm.presetutils.Preset2Html"
    classpath = configurations.runtime
    args('-input',    temp + mapped_vespucci_preset_file,
            '-output',   'index.html',
            '-vespucci', 'https://github.com/simonpoole/' + project.name + '/releases/latest/download/vespucci_zip.zip',
            '-josm',     'https://github.com/simonpoole/' + project.name + '/releases/latest/download/josm.zip')
}
updateWebsite.group = 'preset utils'
updateWebsite.description = 'Update the website'

task updatePot(type: JavaExec) {
    main = "ch.poole.osm.presetutils.Preset2Pot"
    classpath = configurations.runtime
    args('-input',  preset_file,
            '-output', 'i18n/preset.pot')
}
updatePot.group = 'preset utils'
updatePot.description = 'Update the translation template'

task updateTranslations(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
    } else {
        commandLine 'tx', 'pull', '-a'
    }
}
updateTranslations.group = 'transifex'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

// one time transformation to new format
task transformHrefToWiki(type: Exec) {
    def output = 'build/temp/no_href.xml'
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // remove extensions
        commandLine 'cmd', '/c', 'xmlstarlet', 'tr', 'build/xml/href2wiki.xslt', 'master_preset.xml'
    } else {
        // remove extensions
        commandLine 'xmlstarlet', 'tr', 'build/xml/href2wiki.xslt', 'master_preset.xml'
    }
    doFirst {
        standardOutput = new FileOutputStream(new File(projectDir, output))
    }
}

// tasks to generate a zipped preset for JOSM
task josmIcons(dependsOn: ["replaceVersion","mapToBeautifiedIcons"], type: Copy) {
    from tempDir
    include mapped_vespucci_preset_file
    into tempDir
    filteringCharset = 'UTF-8'
    rename mapped_vespucci_preset_file, josm_preset_file
    filter(ReplaceTokens, beginToken : '${', endToken : '}', tokens: [ICONPATH: '', ICONTYPE: 'png'])
}

task transformToJosmOrigIcons(dependsOn: ["mapToJosmIcons", "copyResources"], type: Exec) {
    def output = 'gen/' + 'josm_preset_orig_icons.xml'
    mkdir(generated)
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // remove extensions
        commandLine 'cmd', '/c', 'xmlstarlet', 'tr', 'build/xml/toJOSM.xslt', 'build/temp/' + mapped_josm_preset_file
    } else {
        // remove extensions
        commandLine 'xmlstarlet', 'tr', 'build/xml/toJOSM.xslt', 'build/temp/' + mapped_josm_preset_file
    }
    doFirst {
        standardOutput = new FileOutputStream(new File(buildDir, output))
    }
}

task transformToJosm(dependsOn: ["josmIcons", "copyResources"], type: Exec) {
    def output = 'gen/new_' + josm_preset_file
    mkdir(generated)
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // remove extensions
        commandLine 'cmd', '/c', 'xmlstarlet', 'tr', 'build/xml/toJOSM.xslt', 'build/temp/' + josm_preset_file
    } else {
        // remove extensions
        commandLine 'xmlstarlet', 'tr', 'build/xml/toJOSM.xslt', 'build/temp/' + josm_preset_file
    }
    doFirst {
        standardOutput = new FileOutputStream(new File(buildDir, output))
    }
}

task transformToOldJosm(dependsOn: ["josmIcons", "copyResources"], type: Exec) {
    def output = 'gen/' + josm_preset_file
    mkdir(generated)
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // remove extensions
        commandLine 'cmd', '/c', 'xmlstarlet', 'tr', 'build/xml/wiki2href.xslt', generated + 'new_' + josm_preset_file
    } else {
        // remove extensions
        commandLine 'xmlstarlet', 'tr', 'build/xml/wiki2href.xslt', generated + 'new_' + josm_preset_file
    }
    doFirst {
        standardOutput = new FileOutputStream(new File(buildDir, output))
    }
}

task generateAndValidateJosm(dependsOn: ["transformToJosm", "transformToOldJosm"], type: Exec) {
    def input = generated + josm_preset_file
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // validation
        commandLine 'cmd', '/c', 'xmlstarlet', 'val', '-s', 'build/xml/josm-preset-1.0.xlmns', '-e', input
    } else {
        // validation
        commandLine 'xmlstarlet', 'val', '-s', 'build/xml/josm-preset-1.0.xlmns', '-e', input
    }
}

task josmZip(dependsOn: ["generateAndValidateJosm"], type: Zip) {
    baseName 'josm'
    version ''
    destinationDir = generatedDir
    from ('icons/png')
    from (generated + josm_preset_file)
}
josmZip.group = 'preset'
josmZip.description = 'Generate zipped preset file for JOSM'

def loadProperties = { filename -> 
    def properties = new Properties()
    file(filename).withInputStream {
        properties.load(it)
    }
    return properties
}

// map to JOSM icon set
task mapToJosmIcons(type: Copy) {
    inputs.file('josm_icons.txt')
    from projectDir
    include preset_file
    into tempDir
    filteringCharset = 'UTF-8'
    rename (preset_file, mapped_josm_preset_file)
    def map = loadProperties('josm_icons.txt')
    filter(ReplaceTokens, beginToken : '${', endToken : '}', tokens: map)
}

// map to beautified icon set
task mapToBeautifiedIcons(type: Copy) {
    inputs.file('beautified_icons.txt')
    from projectDir
    include preset_file
    into tempDir
    filteringCharset = 'UTF-8'
    rename (preset_file, mapped_vespucci_preset_file)
    def map = loadProperties('beautified_icons.txt')
    filter(ReplaceTokens, beginToken : '${', endToken : '}', tokens: map)
}

// tasks to generate a zipped preset for vespucci
task vespucciIcons(dependsOn: ["mapToBeautifiedIcons"], type: Copy) {
    from tempDir
    include mapped_vespucci_preset_file
    into generatedDir
    filteringCharset = 'UTF-8'
    rename (mapped_vespucci_preset_file, vespucci_preset_file)
    filter(ReplaceTokens, beginToken : '${', endToken : '}', tokens: [ICONPATH: '', ICONTYPE: 'png'])
}

task checkPreset(dependsOn: ["vespucciIcons", "copyResources"], type: JavaExec) {
    def input = generated + vespucci_preset_file
    main = "ch.poole.osm.presetutils.CheckPreset"
    classpath = configurations.runtime
    args('-i', input)
}

task generateAndValidateVespucci(dependsOn: ["checkPreset"], type: Exec) {
    def input = generated + vespucci_preset_file
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // validation
        commandLine 'cmd', '/c', 'xmlstarlet', 'val', '-s', "build/xml/vespucci-preset-${vespucci_preset_version}.xlmns", '-e', input
    } else {
        // validation
        commandLine 'xmlstarlet', 'val', '-s', "build/xml/vespucci-preset-${vespucci_preset_version}.xlmns", '-e', input
    }
}

// special for building vespucci
task vespucciBuild(dependsOn: ["replaceVersion"], type: Copy) {
    from tempDir
    include mapped_vespucci_preset_file
    into generatedDir
    filteringCharset = 'UTF-8'
    rename (mapped_vespucci_preset_file, vespucci_preset_build_file)
    filter(ReplaceTokens, beginToken : '${', endToken : '}', tokens: [ICONPATH: 'icons/png/', ICONTYPE: 'png'])
}

task generateAndValidateVespucciBuild(dependsOn: ["vespucciBuild", "copyResources"], type: Exec) {
    def input = generated + vespucci_preset_build_file
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        // validation
        commandLine 'cmd', '/c', 'xmlstarlet', 'val', '-s', "build/xml/vespucci-preset-${vespucci_preset_version}.xlmns", '-e', input
    } else {
        // validation
        commandLine 'xmlstarlet', 'val', '-s', "build/xml/vespucci-preset-${vespucci_preset_version}.xlmns", '-e', input
    }
}

task vespucciZip(dependsOn: ["generateAndValidateVespucci", "updateTranslations"], type: Zip) {
    baseName 'vespucci_zip'
    version ''
    destinationDir = generatedDir
    from ('icons/png')
    from (generated + vespucci_preset_file)
    from ('i18n')
    exclude ('*.pot')
}
vespucciZip.group = 'preset'
vespucciZip.description = 'Generate zipped preset file for vespucci'

vespucciZip.group = 'preset'
vespucciZip.description = 'Generate zipped preset file for vespucci'

task vespucciIconsZip(type: Zip) {
    baseName 'vespucci_icons'
    version ''
    destinationDir = generatedDir
    from ('icons/png')
}
vespucciZip.group = 'preset'
vespucciZip.description = 'Generate zipped icon file for vespucci'

task vespucciNoTranslationsZip(dependsOn: ["generateAndValidateVespucci"], type: Zip) {
    baseName 'vespucci_zip_no_translations'
    version ''
    destinationDir = generatedDir
    from ('icons/png')
    from (generated + vespucci_preset_file)
}
vespucciNoTranslationsZip.group = 'preset'
vespucciNoTranslationsZip.description = 'Generate zipped preset file for vespucci without translations'

// this copies the zip files to their legacy location
task copyToGen(dependsOn: ["vespucciNoTranslationsZip", "vespucciZip"]) {
    mkdir('gen')
    copy {
        from generatedDir
        include 'vespucci_zip_no_translations.zip', 'vespucci_zip.zip'
        into 'gen'
    }
}

task replaceVersion {
    inputs.file('build.gradle')
    ant.replaceregexp(match:'presets version="([0-9\\.]+)"', replace:"presets version=\"${version}\"", flags:'g', byline:true) {
        fileset(dir: '.', includes: 'master_preset.xml')
    }
}
  
task recolour {
    group "Icons"
    description "recolour svg icons"

    doLast {
        Map<String, String> colours = [
            accommodation: '#0092DA',
            amenity: '#734A08',
            barrier: '#666666',
            craft: '#ff9933',
            education: '#39AC39',
            emergency: '#CE2029',
            food: '#734A08',
            health: '#DA0092',
            highway: '#666666', 
            indoor: '#000000',
            landuse: '#999999',
            money: '#000000',
            natural: '#999999',
            man_made: '#8e7409',
            military: '#556B2F',
            office: '#ff3333',
            osm: '#000000',
            place_of_worship: '#000000',
            poi: '#000000',    
            power: '#8e7409',
            shopping: '#AC39AC',
            sport: '#39AC39',
            tourist: '#734A08',
            transport: '#0092DA',
            water: '#0092DA'
        ] 
        String[] sources = ["svg-osmic","svg-sjjb","svg-osm-icons"]
        sources.each { source ->
            new File("$projectDir/icons/$source").eachDir { category ->
                def categoryName = category.getName()
                logger.info("Recolouring icons from $source $categoryName")
                copy {
                    from "$category"
                    into 'build/icons/recoloured'
                    filteringCharset = 'UTF-8'
                    rename '(.*)', categoryName+'_$0'  
                    String colour = colours.get(categoryName)
                    String c1 = colour;
                    String c2 = colour;
                    String c3 = '#ffffff';
                    filter {
                        String line -> 
                            line = line.replaceAll('(?i)fill:#111111', 'fill:' + c1)
                            line = line.replaceAll('(?i)fill:#111;', 'fill:' + c1 + ';')
                            line = line.replaceAll('(?i)stroke:#eeeeee', 'stroke:' + c2)
                            line = line.replaceAll('(?i)stroke:#eee;', 'stroke:' + c2 + ';')
                            line = line.replaceAll('(?i)fill:white', 'fill:' + c3)
                            line = line.replaceAll('(?i)stroke:white', 'stroke:' + c3)
                            line = line.replaceAll('(?i)fill:#ffffff', 'fill:' + c3)
                            line = line.replaceAll('(?i)stroke:#ffffff', 'stroke:' + c3)
                            line = line.replaceAll('(?i)fill=\"#111111\"', 'fill=\"' + c1 + '\"')
                            line = line.replaceAll('(?i)fill=\"#111\"', 'fill=\"' + c1 + ' \"')
                            line = line.replaceAll('(?i)stroke=\"#eeeeee\"', 'stroke=\"' + c2 + '\"')
                            line = line.replaceAll('(?i)stroke=\"#eee\"', 'stroke=\"' + c2 + '\"')
                            line = line.replaceAll('(?i)fill=\"white\"', 'fill=\"' + c3 + '\"')
                            line = line.replaceAll('(?i)stroke=\"white\"', 'stroke=\"' + c3 + '\"')
                            line = line.replaceAll('(?i)fill=\"#ffffff\"', 'fill=\"' + c3 + '\"')
                            line = line.replaceAll('(?i)stroke=\"#ffffff\"', 'stroke=\"' + c3 + '\"')
                    }
                }
            }
        }
    }
}
    
task generatePngs (dependsOn: ["recolour"]) {
    group "Icons"
    description "generate PNGs from, potentially recoloured, SVG files"
    
    doLast {
        String[] svgDirs = ["build/icons/recoloured/", "icons/svg-signs/", "icons/svg-roofs/"]
        def windows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
        svgDirs.each { svgDir ->
            logger.info("Creating PNGs for icons in $svgDir")
            def size = svgDir.contains("roof") ? 56 : 48 // hack alert          
            fileTree(dir: svgDir).each { svg ->
                String fileName = svg.getName().replace('.svg','.png');
                exec {
                    if (windows) {
                        commandLine 'cmd', '/c', 'rsvg-convert', '-a', '-f', 'png', '-h', size, '-w', size, '-o', 'icons/png/' + fileName, svg
                    } else {
                        commandLine 'rsvg-convert', '-a', '-f', 'png', '-h', size, '-w', size, '-o', 'icons/png/' + fileName, svg
                    }
                }
            }
        }
    }
}

githubRelease {
    token "${github_token}"
    owner "simonpoole"
    tagName "${version}"
    releaseName "${version}"
    body ""
    releaseAssets new File(buildDir, 'gen').listFiles()
    overwrite true
}

build {
    dependsOn "vespucciNoTranslationsZip"
    dependsOn "vespucciZip"
    dependsOn "vespucciIconsZip"
    dependsOn "generateAndValidateVespucciBuild"
    dependsOn "transformToJosmOrigIcons"
    dependsOn "josmZip"
    dependsOn "updatePot"
    dependsOn "updateWebsite"
    dependsOn "copyToGen"
}

check {
    dependsOn "generateAndValidateVespucci"
    dependsOn "generateAndValidateJosm"
}

